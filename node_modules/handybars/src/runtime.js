
import { get, wtf, isPrimitive, isFunction, isUndefinedOrNull, safe, mapValues, makeContext, MISSING } from './utils';

export function join () {

}

export function resolve (ctx, env, what, needed = false) {
	let target;
	if (!isUndefinedOrNull(ctx)  && !isPrimitive(ctx) && (target = get(ctx, what, MISSING)) !== MISSING) return target;
	if (!isUndefinedOrNull(env)    && (target = get(env, what, MISSING)) !== MISSING) return target;

	let parent = env;
	while ((parent = parent['@parent'])) {
		if (!isUndefinedOrNull(parent.this) && !isPrimitive(parent.this) && (target = get(parent.this, what, MISSING)) !== MISSING) return target;
		if (!isUndefinedOrNull(parent)      && (target = get(parent, what, MISSING)) !== MISSING) return target;
	}

	if (needed) wtf(`Could not resolve "${what}"`);
	return;
}

export function exe ({ ctx, env, first, ...args) {
	if (isFunction(first)) {
		return first(...args, {
			ctx,
			env,
			arguments: args,
			hash,
			resolve: (what) => resolve(ctx, env, what),
		});
	}
}
